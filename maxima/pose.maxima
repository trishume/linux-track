/* function definitions */
/* keepfloat: true; */
mycrossprod(a,b):=transpose(matrix(makelist(determinant(addrow(matrix(x),transpose(a),transpose(b))),x,[[1,0,0],[0,1,0],[0,0,1]])));
mymag(M):=matrix(makelist(sqrt(transpose(col(M,x)) . col(M,x)),x,1,matrix_size(M)[2]));
image(SM):= apply(addcol,makelist(submatrix(3,4,col(SM,x))/row(col(SM,x),4)[1][1],x,1,matrix_size(SM)[2]));
gen_image(reflector_model,flp,tx,ty,tz,ax,ay,az):= block(
 
[screen_coord_xform,translation_matrix,xrotation_matrix,yrotation_matrix,zrotation_matrix,total_xform,screen_mat],
 screen_coord_xform: matrix([1,0,0,0], [0,1,0,0], [0,0,1,0],[0,0,1/flp,0]),
 translation_matrix: transpose(matrix([1,0,0,0],[0,1,0,0],[0,0,1,0],[tx,ty,tz,1])),
 xrotation_matrix: matrix([1,0,0,0], [0,cos(ax),-sin(ax),0], [0,sin(ax),cos(ax),0],[0,0,0,1]),
 yrotation_matrix: matrix([cos(ay),0,sin(ay),0], [0,1,0,0], [-sin(ay),0,cos(ay),0],[0,0,0,1]),
 zrotation_matrix: matrix([cos(az),-sin(az),0,0], [sin(az),cos(az),0,0],[0,0,1,0],[0,0,0,1]),
 total_xform:trigsimp(ratsimp(screen_coord_xform . translation_matrix . xrotation_matrix . yrotation_matrix . zrotation_matrix)),
 screen_mat:trigreduce(trigsimp(ratsimp(total_xform . reflector_model))),
 image(screen_mat)
 );
gen_alter92_reflector_model_estimate(reflector_model,image):= block(
 [R01,R02,R12,d01,d02,d12,a,b,c,s,sigma,h1,h2,H1,H2],
 R01:float(mymag(submatrix(4,col(reflector_model,1) - col(reflector_model,2))))[1][1],
 R02:float(mymag(submatrix(4,col(reflector_model,1) - col(reflector_model,3))))[1][1],
 R12:float(mymag(submatrix(4,col(reflector_model,2) - col(reflector_model,3))))[1][1],
 d01:float(mymag(col(image,1) - col(image,2)))[1][1],
 d02:float(mymag(col(image,1) - col(image,3)))[1][1],
 d12:float(mymag(col(image,2) - col(image,3)))[1][1],
 a: (R01+R02+R12)*(-R01+R02+R12)*(R01-R02+R12)*(R01+R02-R12),
 b: (d012)*(-R012+R022+R122)+(d022)*(R012-R022+R122)+(d122)*(R012+R022-R122),
 c: (d01+d02+d12)*(-d01+d02+d12)*(d01-d02+d12)*(d01+d02-d12),
 s: sqrt((b+sqrt(b2-a*c))/(a)),
 sigma: if (d012+d022-d122) <= s2*(R012+R022-R122) then 1 else -1,
 h1:-sqrt((s*R01)2-d012),
 h2:-sigma*sqrt((s*R02)2-d022),
 H1: h1/s,
 H2: h2/s,
 [s,float(addrow(image/s,[0,H1,H2]))]
 );
gen_rotmat_from_model_estimate(M):=block([protoi,protoj,protok],
protoi:col(M,2)/mymag(col(M,2))[1][1],
protoj:mycrossprod(col(M,2),col(M,3))/mymag(mycrossprod(col(M,2),col(M,3)))[1][1],
protok:mycrossprod(protoi,protoj),
transpose(addcol(protoi,protoj,protok))
);
gen_rotmat_from_reference_frame(C,R):=transpose(gen_rotmat_from_model_estimate(C)) . gen_rotmat_from_model_estimate(R);
/* gen_angles_from_rotmat(R):=block([ax,ay,az], */
/*   ax: float(-atan2(row(col(R,3),2)[1][1],row(col(R,3),3)[1][1])*180/%pi), */
/*   ay: float(asin(row(col(R,3),1)[1][1])*180/%pi), */
/*   az: float(-atan2(row(col(R,2),1)[1][1],row(col(R,1),1)[1][1])*180/%pi), */
/*   [ax,ay,az]); */
gen_angles_from_rotmat(R):=block([ax,ay,az],
 ax: float(-atan2(row(col(R,3),2)[1][1],row(col(R,3),3)[1][1])*180/%pi),
 ay: float(asin(row(col(R,3),1)[1][1])*180/%pi),
 az: float(-atan2(row(col(R,2),1)[1][1],row(col(R,1),1)[1][1])*180/%pi),
 [ax,ay,az]);

/* example use */
common_params: [
CMN_reflector_model=transpose(matrix([0,0,0,1],[7/2,-5,-37/4,1],[-7/2,-5,-37/4,1])),
CMN_flp=863.0
];
nthframe_params: subst(common_params,[reflector_model=CMN_reflector_model,flp=CMN_flp,
tx=0.0,
ty=0.0,
tz=45.0,
ax=0.0*%pi/180,
ay=45*%pi/180,
az=0.0*%pi/180
]);
refframe_params: subst(common_params,[reflector_model=CMN_reflector_model,flp=CMN_flp,
tx=0.0,
ty=0.0,
tz=45.0,
ax=0.0*%pi/180,
ay=0.0*%pi/180,
az=0.0*%pi/180
]);

ref_img:float(apply(gen_image, subst(refframe_params,[reflector_model,flp,tx,ty,tz,ax,ay,az])));
nth_img:float(apply(gen_image, subst(nthframe_params,[reflector_model,flp,tx,ty,tz,ax,ay,az])));
M0:float(gen_alter92_reflector_model_estimate(subst(refframe_params,reflector_model),ref_img));
Mn:float(gen_alter92_reflector_model_estimate(subst(nthframe_params,reflector_model),nth_img));
erotmat:float(subst(nthframe_params,xrotation_matrix . yrotation_matrix . zrotation_matrix));
mrotmat:transpose(gen_rotmat_from_model_estimate(Mn[2])) . gen_rotmat_from_model_estimate(M0[2]);
gen_angles_from_rotmat(erotmat);
gen_angles_from_rotmat(mrotmat); 
