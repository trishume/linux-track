%{
  #include "pref.hpp"
  #include "pref_bison.h"
  #include "pref_flex.h"
  
  //void ltr_int_parser_error (char const *s);
  void ltr_int_parser_error(YYLTYPE *loc, prefs *prf, char const *s); 
%}

%debug
%pure_parser
%locations
%error-verbose
%parse-param {prefs *prf}

%union {
  std::string *str;
  keyVal *kv;
  section *sec;
  prefs *prf;
}


%token TOKEN_COMMENT
%token TOKEN_LEFT_BRACKET
%token TOKEN_RIGHT_BRACKET
%token TOKEN_KEY
%token TOKEN_EQ
%token TOKEN_VALUE
%token TOKEN_SECNAME


%type <str> TOKEN_COMMENT TOKEN_KEY TOKEN_VALUE TOKEN_SECNAME
%type <kv> key_val_pair
%type <sec> section section_content
%type <prf> input

//%right SEC_COMMENT
//%left LONE_COMMENT

%right LOW_PRIO
%right TOKEN_COMMENT

%%
input:		/* empty */ {
		  prf->clear();
		  $$ = prf;
		}
      		| input section {
      		  $$ = $1;
      		  $$->addItem($2);
      		}
      		| input TOKEN_COMMENT{
      		  $$ = $1;
                  $$->addItem(new prefComment($2));
                }
                | input error
;


section : 	TOKEN_LEFT_BRACKET TOKEN_SECNAME TOKEN_RIGHT_BRACKET section_content %prec LOW_PRIO{
                  $$ = $4;
                  $$->setName($2);
                }
;

section_content:/*empty*/ {
                  $$ = new section();
		}
		| section_content key_val_pair {
		  $$ = $1;
		  $$->addItem($2);
                }
                | section_content TOKEN_COMMENT{
		  $$ = $1;
		  $$->addItem(new secComment($2));
                }

key_val_pair:	TOKEN_KEY TOKEN_EQ TOKEN_VALUE {
                  $$ = new keyVal($1, $3);
		}
;
%%



