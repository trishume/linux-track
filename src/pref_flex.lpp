%{
  #include <string>
  #include "pref.hpp"
  #include "pref_bison.h"
  //extern int line_num;
%}
%option bison-bridge
%option bison-locations
%option noyywrap
%option nounput
%option noinput
%option yylineno
%option outfile="lex.yy.c"
%option header-file="../pref_flex.h"
%option prefix="ltr_int_parser_"

%x VALUE SEC_NAME

KEY			[_a-zA-Z0-9-]+
%%
=[[:blank:]]*		{BEGIN(VALUE); return(TOKEN_EQ);}
\[                      {BEGIN(SEC_NAME); return(TOKEN_LEFT_BRACKET);}  
\]                      {return(TOKEN_RIGHT_BRACKET);}  

{KEY}			{
			  yylval->str=new std::string(ltr_int_parser_text);
			  return(TOKEN_KEY);
			}
#.*			{
			  yylval->str=new std::string(ltr_int_parser_text);
			  return(TOKEN_COMMENT);
			}

[[:blank:]]		/* eat up whitespace */

<VALUE>[^\n]*           {
			  yylval->str=new std::string(ltr_int_parser_text);
                          return(TOKEN_VALUE);
                        }


<INITIAL,VALUE>\n       {
                          //line_num++;
                          (void)yylloc;
                          BEGIN(INITIAL);
                        }
<SEC_NAME>[^\]\n]*      {
			  yylval->str=new std::string(ltr_int_parser_text);
                          BEGIN(INITIAL);
                          return(TOKEN_SECNAME);
                        }
  
.			//ltr_int_log_message( "Unrecognized character: %s\n", ltr_int_parser_text );
%%

